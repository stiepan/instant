-- based on test file automatically generated by BNF Converter
module Main where

import System.Environment ( getArgs )
import System.Exit ( exitFailure, exitSuccess )

import LexGrammar
import ParGrammar
import SkelGrammar
import PrintGrammar
import AbsGrammar
import ErrM

import qualified Jvm.Compile as Jvm
import qualified Jvm.Print as PrintJvm


main :: IO ()
main = do
  args <- getArgs
  case args of
    [f] -> compileFile f
    _ -> usage


compileFile :: FilePath -> IO ()
compileFile f = putStrLn f >> readFile f >>= compile


compile :: String -> IO ()
compile programText =
  case pProgram (myLexer programText) of
    Bad s -> do
      putStrLn "\nParsing failed\n"
      putStrLn programText
      exitFailure
    Ok tree -> do
      putStrLn $ PrintJvm.showProg $ Jvm.compileP tree
--      showTree tree
      exitSuccess


--showTree :: (Show a, Print a) => a -> IO ()
--showTree tree
-- = do
--      putStrLn $ "\n[Abstract Syntax]\n\n" ++ show tree
--      putStrLn $ "\n[Linearized tree]\n\n" ++ printTree tree


usage :: IO ()
usage = do
  putStrLn $ unlines
    [ "usage: Call with one of the following argument combinations:"
    , "  --help   Display this help message."
    , "  file     Compile .ins file to jasmin"
    ]
  exitFailure
